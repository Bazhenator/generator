// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: generator.proto

package generator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GeneratorService_StartGenerator_FullMethodName = "/generator.GeneratorService/StartGenerator"
)

// GeneratorServiceClient is the client API for GeneratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeneratorServiceClient interface {
	StartGenerator(ctx context.Context, in *StartGeneratorIn, opts ...grpc.CallOption) (*StartGeneratorOut, error)
}

type generatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGeneratorServiceClient(cc grpc.ClientConnInterface) GeneratorServiceClient {
	return &generatorServiceClient{cc}
}

func (c *generatorServiceClient) StartGenerator(ctx context.Context, in *StartGeneratorIn, opts ...grpc.CallOption) (*StartGeneratorOut, error) {
	out := new(StartGeneratorOut)
	err := c.cc.Invoke(ctx, GeneratorService_StartGenerator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeneratorServiceServer is the server API for GeneratorService service.
// All implementations must embed UnimplementedGeneratorServiceServer
// for forward compatibility
type GeneratorServiceServer interface {
	StartGenerator(context.Context, *StartGeneratorIn) (*StartGeneratorOut, error)
	mustEmbedUnimplementedGeneratorServiceServer()
}

// UnimplementedGeneratorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGeneratorServiceServer struct {
}

func (UnimplementedGeneratorServiceServer) StartGenerator(context.Context, *StartGeneratorIn) (*StartGeneratorOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartGenerator not implemented")
}
func (UnimplementedGeneratorServiceServer) mustEmbedUnimplementedGeneratorServiceServer() {}

// UnsafeGeneratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeneratorServiceServer will
// result in compilation errors.
type UnsafeGeneratorServiceServer interface {
	mustEmbedUnimplementedGeneratorServiceServer()
}

func RegisterGeneratorServiceServer(s grpc.ServiceRegistrar, srv GeneratorServiceServer) {
	s.RegisterService(&GeneratorService_ServiceDesc, srv)
}

func _GeneratorService_StartGenerator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartGeneratorIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeneratorServiceServer).StartGenerator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GeneratorService_StartGenerator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeneratorServiceServer).StartGenerator(ctx, req.(*StartGeneratorIn))
	}
	return interceptor(ctx, in, info, handler)
}

// GeneratorService_ServiceDesc is the grpc.ServiceDesc for GeneratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GeneratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generator.GeneratorService",
	HandlerType: (*GeneratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartGenerator",
			Handler:    _GeneratorService_StartGenerator_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generator.proto",
}
